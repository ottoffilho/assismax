import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "jsr:@supabase/supabase-js";

const DEEPSEEK_API_KEY = Deno.env.get('DEEPSEEK_API_KEY');
const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

// Cliente Supabase com permiss√µes de service role
const supabaseAdmin = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

interface AdminConversationMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp?: string;
}

interface AdminConversationRequest {
  message: string;
  conversation_history: AdminConversationMessage[];
  user_token?: string;
}

interface QueryResult {
  data: any[];
  query: string;
  description: string;
}

// Rate limiting simples (em produ√ß√£o usar Redis ou similar)
const requestCounts = new Map<string, { count: number; resetTime: number }>();
const RATE_LIMIT = 30; // requests per minute
const RATE_WINDOW = 60 * 1000; // 1 minute

function checkRateLimit(userEmail: string): boolean {
  const now = Date.now();
  const userLimit = requestCounts.get(userEmail);
  
  if (!userLimit || now > userLimit.resetTime) {
    requestCounts.set(userEmail, { count: 1, resetTime: now + RATE_WINDOW });
    return true;
  }
  
  if (userLimit.count >= RATE_LIMIT) {
    return false;
  }
  
  userLimit.count++;
  return true;
}

// Verificar se o usu√°rio √© admin com valida√ß√µes extras
async function verifyAdminAccess(token: string): Promise<{ isValid: boolean; userEmail?: string; userId?: string }> {
  try {
    const supabaseUser = createClient(SUPABASE_URL!, token);
    const { data: { user }, error: authError } = await supabaseUser.auth.getUser();
    
    if (authError || !user) {
      console.error('Erro de autentica√ß√£o:', authError);
      return { isValid: false };
    }

    // Rate limiting por usu√°rio
    if (!checkRateLimit(user.email!)) {
      console.warn(`Rate limit exceeded for user: ${user.email}`);
      return { isValid: false };
    }

    // Verificar se √© admin na tabela funcionarios
    const { data: funcionario, error: funcionarioError } = await supabaseAdmin
      .from('funcionarios')
      .select('nivel_acesso, ativo, id')
      .eq('email', user.email)
      .single();

    if (funcionarioError || !funcionario) {
      console.error('Funcion√°rio n√£o encontrado:', funcionarioError);
      return { isValid: false };
    }

    const isAdmin = funcionario.nivel_acesso === 'admin' && funcionario.ativo;
    
    if (!isAdmin) {
      // Log tentativa de acesso n√£o autorizado
      await logSecurityEvent('UNAUTHORIZED_ACCESS_ATTEMPT', user.email!, {
        attempted_resource: 'admin-ai-assistant',
        user_level: funcionario.nivel_acesso,
        user_active: funcionario.ativo
      });
    }

    return { 
      isValid: isAdmin, 
      userEmail: user.email!,
      userId: funcionario.id 
    };
  } catch (error) {
    console.error('Erro na verifica√ß√£o de admin:', error);
    return { isValid: false };
  }
}

// Log de eventos de seguran√ßa
async function logSecurityEvent(eventType: string, userEmail: string, details: any) {
  try {
    await supabaseAdmin
      .from('audit_logs')
      .insert({
        nome_tabela: 'security_events',
        operacao: eventType,
        dados_novos: {
          user_email: userEmail,
          event_type: eventType,
          details: details,
          timestamp: new Date().toISOString(),
          ip_address: '127.0.0.1' // Em produ√ß√£o, capturar IP real
        },
        usuario_id: userEmail
      });
  } catch (error) {
    console.error('Erro ao registrar evento de seguran√ßa:', error);
  }
}

// Registrar consulta no audit log
async function logQuery(query: string, userEmail: string, results: number) {
  try {
    await supabaseAdmin
      .from('audit_logs')
      .insert({
        nome_tabela: 'admin_chatbot_queries',
        operacao: 'SELECT',
        dados_novos: {
          query: query,
          user_email: userEmail,
          results_count: results,
          timestamp: new Date().toISOString()
        },
        usuario_id: userEmail,
        ip_address: '127.0.0.1'
      });
  } catch (error) {
    console.error('Erro ao registrar query no audit log:', error);
  }
}

// Executar query SQL segura
async function executeSecureQuery(sqlQuery: string, userEmail: string): Promise<QueryResult> {
  try {
    // Sanitizar query - apenas SELECTs s√£o permitidos
    const normalizedQuery = sqlQuery.trim().toLowerCase();
    if (!normalizedQuery.startsWith('select')) {
      throw new Error('Apenas consultas SELECT s√£o permitidas');
    }

    // Verificar se n√£o h√° opera√ß√µes perigosas
    const dangerousOperations = ['insert', 'update', 'delete', 'drop', 'create', 'alter', 'truncate'];
    if (dangerousOperations.some(op => normalizedQuery.includes(op))) {
      throw new Error('Opera√ß√µes de modifica√ß√£o n√£o s√£o permitidas');
    }

    // Executar query
    const { data, error } = await supabaseAdmin.rpc('execute_sql', {
      sql_query: sqlQuery
    });

    if (error) {
      throw new Error(`Erro na consulta SQL: ${error.message}`);
    }

    // Log da consulta
    await logQuery(sqlQuery, userEmail, data?.length || 0);

    return {
      data: data || [],
      query: sqlQuery,
      description: 'Consulta executada com sucesso'
    };
  } catch (error) {
    console.error('Erro ao executar query:', error);
    throw error;
  }
}

// Analisar pergunta e gerar SQL
async function generateSQLFromQuestion(question: string): Promise<string> {
  const sqlGenerationPrompt = `Voc√™ √© um especialista em SQL para um sistema de CRM/atacarejo. 

TABELAS DISPON√çVEIS:
- empresas (id, nome, telefone, email, endereco, ativo, created_at)
- funcionarios (id, empresa_id, nome, email, telefone, nivel_acesso, ativo, created_at)
- leads (id, empresa_id, funcionario_id, nome, telefone, email, origem, status, observacoes, created_at, updated_at)
- conversas (id, lead_id, funcionario_id, canal, tipo, mensagem, lida, timestamp)
- conversas_ia (id, lead_id, mensagem, resposta, timestamp)
- produtos (id, empresa_id, nome, categoria, preco_varejo, preco_atacado, estoque, ativo, created_at)
- consentimentos (id, lead_id, aceite_termos, aceite_marketing, aceite_whatsapp, timestamp)
- metricas (id, empresa_id, tipo, valor, metadata, data, timestamp)

VIEWS DISPON√çVEIS:
- dashboard_proprietario (m√©tricas agregadas)
- performance_funcionarios (performance por funcion√°rio)

PERGUNTA: "${question}"

Gere APENAS uma consulta SQL SELECT v√°lida e segura. N√£o inclua explica√ß√µes.
Use sempre empresa_id = '231f795a-b14c-438b-a896-2f2e479cfa02' para filtrar dados da AssisMax.
Para datas, use DATE_TRUNC e CURRENT_DATE quando necess√°rio.
Ordene os resultados de forma l√≥gica.
Limite a 50 resultados com LIMIT 50.`;

  try {
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          { role: 'user', content: sqlGenerationPrompt }
        ],
        max_tokens: 500,
        temperature: 0.1
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na API DeepSeek: ${response.status}`);
    }

    const result = await response.json();
    const sqlQuery = result.choices?.[0]?.message?.content?.trim();

    if (!sqlQuery) {
      throw new Error('N√£o foi poss√≠vel gerar consulta SQL');
    }

    return sqlQuery.replace(/```sql\n?|\n?```/g, '').trim();
  } catch (error) {
    console.error('Erro ao gerar SQL:', error);
    throw new Error('Erro ao processar sua pergunta');
  }
}

// Gerar resposta interpretativa dos dados
async function generateBusinessInsight(question: string, queryResult: QueryResult, conversationHistory: AdminConversationMessage[]): Promise<string> {
  const businessPrompt = `Voc√™ √© o AssisBot Pro, assistente executivo especializado em:
üéØ MARKETING DIGITAL (funil, ROI, convers√µes, campanhas)
üè™ GEST√ÉO DE ATACAREJO (m√©tricas operacionais, estoque, margem)  
üë• GEST√ÉO DE PESSOAS (performance, produtividade, metas)

CONTEXTO DO NEG√ìCIO:
- AssisMax: Atacarejo em Valpara√≠so-GO
- Modelo: B2C atacado para fam√≠lias
- Produtos: Arroz, feij√£o, √≥leo, caf√©, leite, bebidas
- Equipe: 3 funcion√°rios + propriet√°rio
- Faturamento: R$ 500k/m√™s

PERGUNTA DO USU√ÅRIO: "${question}"

DADOS OBTIDOS:
Query executada: ${queryResult.query}
Resultados (${queryResult.data.length} registros):
${JSON.stringify(queryResult.data.slice(0, 10), null, 2)}

INSTRU√á√ïES:
1. Analise os dados com expertise de neg√≥cios
2. Forne√ßa insights acion√°veis, n√£o apenas n√∫meros
3. Use linguagem executiva em portugu√™s
4. Sugira a√ß√µes concretas baseadas nos dados
5. Contextualize com conhecimento do mercado atacarejo
6. Se h√° poucos dados, mencione e sugira como melhorar
7. Seja direto e objetivo, m√°ximo 300 palavras

FORMATO DA RESPOSTA:
üìä **Resultado:** [resumo dos n√∫meros]
üí° **Insights:** [interpreta√ß√£o estrat√©gica]
üéØ **Recomenda√ß√µes:** [a√ß√µes espec√≠ficas]`;

  try {
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          { role: 'system', content: businessPrompt },
          ...conversationHistory.slice(-6),
          { role: 'user', content: question }
        ],
        max_tokens: 600,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na API DeepSeek: ${response.status}`);
    }

    const result = await response.json();
    return result.choices?.[0]?.message?.content || 'Desculpe, n√£o consegui analisar os dados no momento.';
  } catch (error) {
    console.error('Erro ao gerar insight:', error);
    return 'Dados obtidos com sucesso, mas houve um problema na an√°lise. Verifique os resultados acima.';
  }
}

Deno.serve(async (req: Request) => {
  // CORS headers
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
      }
    });
  }

  try {
    const { message, conversation_history, user_token } = await req.json() as AdminConversationRequest;

    // Verificar se o token foi fornecido
    if (!user_token) {
      throw new Error('Token de autentica√ß√£o necess√°rio');
    }

    // Verificar acesso de admin
    const adminCheck = await verifyAdminAccess(user_token);
    if (!adminCheck.isValid) {
      return new Response(JSON.stringify({
        success: false,
        error: 'Acesso negado. Apenas administradores podem usar este assistente.',
        response: 'üö´ Desculpe, este recurso √© exclusivo para administradores do sistema.'
      }), {
        status: 403,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        }
      });
    }

    const { userEmail, userId } = adminCheck;

    // Gerar SQL baseado na pergunta
    const sqlQuery = await generateSQLFromQuestion(message);
    
    // Executar query
    const queryResult = await executeSecureQuery(sqlQuery, userEmail!);

    // Gerar insight de neg√≥cio
    const businessResponse = await generateBusinessInsight(message, queryResult, conversation_history);

    return new Response(JSON.stringify({
      success: true,
      response: businessResponse,
      query_executed: sqlQuery,
      data_count: queryResult.data.length,
      raw_data: queryResult.data.slice(0, 5) // Apenas primeiros 5 registros para n√£o sobrecarregar
    }), {
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      }
    });

  } catch (error) {
    console.error('Erro na fun√ß√£o admin-ai-assistant:', error);
    
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      response: `ü§ñ **AssisBot Pro encontrou um problema:**\n\n${error.message}\n\nTente reformular sua pergunta ou use termos mais espec√≠ficos sobre leads, funcion√°rios, produtos ou m√©tricas.`
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      }
    });
  }
});